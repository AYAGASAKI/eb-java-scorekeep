Resources:
  ScorekeepWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /service-role/

  ScorekeepWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "PLACEHOLDER"
      Description: "Flatten game records for analytics"
      Environment:
        Variables:
          WORKER_QUEUE: { "Ref" : "WorkerQueue" }
      FunctionName: scorekeep-worker
      Handler: scorekeep-worker.lambda_handler
      Role: { "Fn::GetAtt": ["ScorekeepWorkerRole", "Arn"] }
      Runtime: python3.6
  EventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Fires periodically to trigger a Lambda worker
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: { "Fn::GetAtt": ["ScorekeepWorkerFunction", "Arn"] }
          Id: "ScorekeepWorkerFunction"
  EventsRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ScorekeepWorkerFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: { "Fn::GetAtt": ["EventsRule", "Arn"] }
  WorkerQueue:
    Type: AWS::SQS::Queue
  RecordsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
Outputs:
  WorkerQueueUrl:
    Description: Worker queue url
    Value: { "Ref" : "WorkerQueue" }
    Export:
      Name: ScorekeepWorkerQueueUrl
  RecordsBucketName:
    Description: Records bucket name
    Value: { "Ref" : "RecordsBucket" }
    Export:
      Name: ScorekeepRecordsBucketName